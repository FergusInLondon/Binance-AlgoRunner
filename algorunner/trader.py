from logging import getLogger
from queue import Queue
from threading import Thread

from algorunner import messages
from algorunner.abstract import Calculator
from algorunner.adapters.base import Adapter

logger = getLogger()


class Trader:
    """
    The Trader is a model of a real "trader" - i.e it monitors for indicators
    generated by it's strategy, applies calculations from rules defined by it's
    `Calculator` instance to determine whether an order should be made, and if
    so, at what rate/quantity.
    """

    def __init__(self,
                 calculator: Calculator,
                 adapter: Adapter,
                 queue: Queue,
                 symbol: str):
        self.calculator = calculator
        self.adapter = adapter
        self.symbol = symbol
        self.queue = queue

    def start(self):
        """ """
        # @todo - do we *really* want it as a daemon; I see two arguments here.
        self.thread = Thread(target=self._listen, daemon=True)
        self.thread.start()

    def stop(self):
        # @todo - need some signal magic here.
        pass

    def _listen(self):
        message_handlers = {
            messages.MessageType.REQUEST_BUY: self._handleBuy,
            messages.MessageType.REQUEST_SELL: self._handleSell,
            messages.MessageType.UPDATE_BALANCE: self._handleBalanceUpdate,
            messages.MessageType.UPDATE_ACCOUNT: self._handleAccountUpdate,
            messages.MessageType.UPDATE_POSITION: self._handlePositionUpdate,
            messages.MessageType.UPDATE_ORDER: self._handleOrderUpdate
        }

        while True:
            trader_message = self.queue.get()

            handler = message_handlers.get(trader_message.Type)
            if not handler:
                logger.warn("recieved message without known handler")
                continue

            handler(trader_message.Msg)

    def _handleBuy(self, buy_message: messages.MessageBuyOrder):
        pass

    def _handleSell(self, sell_message: messages.MessageSellOrder):
        pass

    def _handleBalanceUpdate(self, update: messages.MessageBalanceUpdate):
        pass

    def _handleAccountUpdate(self, update: messages.MessageAccountUpdate):
        pass

    def _handlePositionUpdate(self, update: messages.MessagePositionUpdate):
        pass

    def _handleOrderUpdate(self, update: messages.MessageOrderUpdate):
        pass


"""
    # @todo - these will be events.
    def buy(self, asset, amount, limit=False, price=0):
        if limit:
            self.binance.order_limit_buy(
                symbol=asset,
                quantity=amount,
                price=price)
        else:
            self.binance.order_market_buy(
                symbol=asset,
                quantity=amount)

    # @todo - these will be events.
    def sell(self, asset, amount, limit=False, price=0):
        if limit:
            self.binance.order_limit_sell(
                symbol=asset,
                quantity=amount,
                price=price)
        else:
            self.binance.order_market_sell(
                symbol=asset,
                quantity=amount)
"""
